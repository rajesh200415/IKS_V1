import { pipeline, Pipeline } from '@xenova/transformers';

export interface BioBertResponse {
  answer: string;
  confidence: number;
  context?: string;
  debugInfo?: {
    originalQuestion: string;
    processedQuestion: string;
    contextLength: number;
    modelReady: boolean;
    translationApplied: boolean;
  };
}

class BioBertModel {
  private questionAnsweringPipeline: Pipeline | null = null;
  private isInitialized = false;
  private initializationPromise: Promise<void> | null = null;
  private isLoading = false;
  private loadingProgress = 0;

  constructor() {
    // Start initialization immediately for better UX
    this.initializeModel().catch(error => {
      console.warn('Initial model loading failed:', error);
    });
  }

  private async initializeModel(): Promise<void> {
    if (this.initializationPromise) {
      return this.initializationPromise;
    }

    if (this.isLoading) {
      return new Promise((resolve) => {
        const checkLoading = () => {
          if (!this.isLoading) {
            resolve();
          } else {
            setTimeout(checkLoading, 100);
          }
        };
        checkLoading();
      });
    }

    this.initializationPromise = this.loadModels();
    return this.initializationPromise;
  }

  private async loadModels(): Promise<void> {
    try {
      this.isLoading = true;
      this.loadingProgress = 0;
      console.log('ü§ñ Starting AI model initialization...');
      
      // Use a more reliable and faster model for question-answering
      this.questionAnsweringPipeline = await pipeline(
        'question-answering',
        'Xenova/distilbert-base-cased-distilled-squad',
        {
          quantized: true,
          progress_callback: (progress: any) => {
            if (progress.status === 'downloading') {
              this.loadingProgress = Math.round(progress.progress || 0);
              console.log(`üì• Downloading AI model: ${this.loadingProgress}%`);
            } else if (progress.status === 'loading') {
              console.log('üîÑ Loading AI model into memory...');
            }
          }
        }
      );

      // Test the model with a simple question to ensure it's working
      const testResult = await this.questionAnsweringPipeline(
        'What is this?',
        'This is a test to verify the model is working correctly.'
      );
      
      if (!testResult || !testResult.answer) {
        throw new Error('Model test failed - no answer returned');
      }

      this.isInitialized = true;
      this.isLoading = false;
      this.loadingProgress = 100;
      console.log('‚úÖ AI model loaded and tested successfully');
    } catch (error) {
      console.error('‚ùå Error loading AI models:', error);
      this.isInitialized = false;
      this.isLoading = false;
      this.loadingProgress = 0;
      // Don't throw error, allow fallback
    }
  }

  public async isReady(): Promise<boolean> {
    if (this.isLoading) {
      console.log(`‚è≥ AI model loading: ${this.loadingProgress}%`);
      return false;
    }
    
    if (!this.isInitialized && !this.initializationPromise) {
      // Start initialization if not already started
      this.initializeModel().catch(() => {
        // Ignore errors, will use fallback
      });
      return false;
    }
    
    if (this.initializationPromise && !this.isInitialized) {
      try {
        await this.initializationPromise;
      } catch {
        // Ignore errors, will use fallback
      }
    }
    
    return this.isInitialized;
  }

  public async answerQuestion(
    question: string,
    context: string,
    language: 'en' | 'ta' = 'en'
  ): Promise<BioBertResponse> {
    const debugInfo = {
      originalQuestion: question,
      processedQuestion: question,
      contextLength: context.length,
      modelReady: false,
      translationApplied: false
    };

    try {
      console.log('üîç Processing question:', question.substring(0, 100) + '...');
      console.log('üìÑ Context length:', context.length);

      // Check if model is ready with timeout
      const modelReady = await Promise.race([
        this.isReady(),
        new Promise<boolean>(resolve => setTimeout(() => resolve(false), 5000))
      ]);
      
      debugInfo.modelReady = modelReady;

      if (!modelReady || !this.questionAnsweringPipeline) {
        console.log('‚ö†Ô∏è AI model not ready, using fallback');
        throw new Error('AI model not ready');
      }

      // Enhanced translation for Tamil questions
      let processedQuestion = question;
      if (language === 'ta') {
        processedQuestion = this.translateTamilKeywords(question);
        debugInfo.translationApplied = processedQuestion !== question;
        console.log('üîÑ Tamil translation applied:', debugInfo.translationApplied);
        console.log('üìù Processed question:', processedQuestion);
      }
      debugInfo.processedQuestion = processedQuestion;

      // Optimize context length for better performance
      let optimizedContext = context;
      if (context.length > 2000) {
        // Keep most relevant parts of context
        const sentences = context.split(/[.!?]+/).filter(s => s.trim().length > 10);
        const relevantSentences = sentences
          .map(sentence => ({
            sentence: sentence.trim(),
            relevance: this.calculateRelevance(sentence, processedQuestion)
          }))
          .sort((a, b) => b.relevance - a.relevance)
          .slice(0, 10)
          .map(item => item.sentence);
        
        optimizedContext = relevantSentences.join('. ') + '.';
        console.log('‚úÇÔ∏è Context optimized from', context.length, 'to', optimizedContext.length, 'characters');
      }

      console.log('ü§ñ Querying AI model...');
      const result = await this.questionAnsweringPipeline(processedQuestion, optimizedContext);
      console.log('üì§ AI model response:', result);

      if (!result || !result.answer) {
        throw new Error('No answer returned from model');
      }

      let answer = result.answer.trim();
      let confidence = result.score || 0;

      console.log('üìä Raw confidence:', confidence);
      console.log('üìù Raw answer:', answer);

      // Enhanced confidence calculation
      confidence = this.calculateEnhancedConfidence(answer, processedQuestion, optimizedContext, confidence);
      console.log('üìä Enhanced confidence:', confidence);

      // Improve answer quality
      answer = this.improveAnswerQuality(answer, processedQuestion, language);

      // If confidence is still very low, provide a more contextual response
      if (confidence < 0.2) {
        console.log('‚ö†Ô∏è Low confidence, generating contextual fallback');
        answer = this.generateContextualFallback(processedQuestion, optimizedContext, language);
        confidence = 0.3; // Set minimum confidence for contextual responses
      }

      // Translate back to Tamil if needed
      if (language === 'ta' && answer !== 'No specific answer found.') {
        const translatedAnswer = this.translateEnglishKeywords(answer);
        if (translatedAnswer !== answer) {
          answer = translatedAnswer;
          console.log('üîÑ Answer translated back to Tamil');
        }
      }

      console.log('‚úÖ Final answer:', answer.substring(0, 100) + '...');
      console.log('üìä Final confidence:', confidence);

      return {
        answer,
        confidence,
        context: optimizedContext.substring(0, 200) + '...',
        debugInfo
      };
    } catch (error) {
      console.error('‚ùå Error in AI question answering:', error);
      
      // Enhanced fallback response
      const fallbackAnswer = this.generateIntelligentFallback(question, context, language);
      
      return {
        answer: fallbackAnswer,
        confidence: 0.25, // Slightly higher confidence for intelligent fallbacks
        debugInfo
      };
    }
  }

  private calculateRelevance(sentence: string, question: string): number {
    const questionWords = question.toLowerCase().split(/\s+/);
    const sentenceWords = sentence.toLowerCase().split(/\s+/);
    
    let relevanceScore = 0;
    questionWords.forEach(qWord => {
      if (qWord.length > 2) {
        sentenceWords.forEach(sWord => {
          if (sWord.includes(qWord) || qWord.includes(sWord)) {
            relevanceScore += 1;
          }
        });
      }
    });
    
    return relevanceScore / questionWords.length;
  }

  private calculateEnhancedConfidence(answer: string, question: string, context: string, originalConfidence: number): number {
    let enhancedConfidence = originalConfidence;
    
    // Boost confidence if answer contains question keywords
    const questionWords = question.toLowerCase().split(/\s+/).filter(w => w.length > 2);
    const answerWords = answer.toLowerCase().split(/\s+/);
    const keywordMatches = questionWords.filter(qw => 
      answerWords.some(aw => aw.includes(qw) || qw.includes(aw))
    ).length;
    
    const keywordBoost = (keywordMatches / questionWords.length) * 0.3;
    enhancedConfidence += keywordBoost;
    
    // Reduce confidence for very short or generic answers
    if (answer.length < 10) {
      enhancedConfidence *= 0.5;
    } else if (answer.length < 30) {
      enhancedConfidence *= 0.7;
    }
    
    // Boost confidence for medical/veterinary terms
    const medicalTerms = ['treatment', 'symptom', 'disease', 'medicine', 'dosage', 'cattle', 'buffalo'];
    const medicalMatches = medicalTerms.filter(term => 
      answer.toLowerCase().includes(term) || context.toLowerCase().includes(term)
    ).length;
    
    if (medicalMatches > 0) {
      enhancedConfidence += medicalMatches * 0.1;
    }
    
    return Math.min(Math.max(enhancedConfidence, 0), 1);
  }

  private improveAnswerQuality(answer: string, question: string, language: 'en' | 'ta'): string {
    // Remove common artifacts
    let improvedAnswer = answer
      .replace(/^(the|a|an)\s+/i, '')
      .replace(/\s+/g, ' ')
      .trim();
    
    // Capitalize first letter
    if (improvedAnswer.length > 0) {
      improvedAnswer = improvedAnswer.charAt(0).toUpperCase() + improvedAnswer.slice(1);
    }
    
    // Add period if missing
    if (improvedAnswer.length > 0 && !improvedAnswer.match(/[.!?]$/)) {
      improvedAnswer += '.';
    }
    
    return improvedAnswer;
  }

  private generateContextualFallback(question: string, context: string, language: 'en' | 'ta'): string {
    // Extract key information from context for a meaningful response
    const contextSentences = context.split(/[.!?]+/).filter(s => s.trim().length > 10);
    const relevantSentences = contextSentences
      .map(sentence => ({
        sentence: sentence.trim(),
        relevance: this.calculateRelevance(sentence, question)
      }))
      .sort((a, b) => b.relevance - a.relevance)
      .slice(0, 2)
      .map(item => item.sentence);
    
    const relevantInfo = relevantSentences.join('. ');
    
    if (language === 'ta') {
      return relevantInfo.length > 20 
        ? `‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æü‡Øà‡ÆØ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç: ${relevantInfo}. ‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.`
        : '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.';
    } else {
      return relevantInfo.length > 20
        ? `Based on available information: ${relevantInfo}. For detailed guidance, please consult with a veterinarian.`
        : 'I couldn\'t find specific information for your question. Please consult with a veterinarian for detailed guidance.';
    }
  }

  private generateIntelligentFallback(question: string, context: string, language: 'en' | 'ta'): string {
    // Analyze question intent for better fallback
    const questionLower = question.toLowerCase();
    
    if (questionLower.includes('symptom') || questionLower.includes('‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø')) {
      return language === 'ta'
        ? '‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø‡Æï‡Æ≥‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡Æï‡Øç‡Æï‡ØÅ, ‡ÆÆ‡Øá‡Æ≤‡Øá ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æ§‡Øá‡Æü‡Æ≤‡Øç ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æø ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü ‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø‡Æï‡Æ≥‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.'
        : 'For symptom-related questions, please use the search feature above to find specific symptoms.';
    }
    
    if (questionLower.includes('treatment') || questionLower.includes('‡Æö‡Æø‡Æï‡Æø‡Æö‡Øç‡Æö‡Øà')) {
      return language === 'ta'
        ? '‡Æö‡Æø‡Æï‡Æø‡Æö‡Øç‡Æö‡Øà ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ, ‡Æ®‡Øã‡ÆØ‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øà‡Æï‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü‡ØÅ ‡Æ§‡Øá‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.'
        : 'For treatment information, please search by disease name or consult with a veterinarian.';
    }
    
    return language === 'ta'
      ? '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡Æ±‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü ‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æµ‡Øá‡Æ±‡ØÅ ‡Æµ‡Ææ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æï‡Øá‡Æü‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.'
      : 'I don\'t have a specific answer for your question right now. Please try rephrasing or consult with a veterinarian.';
  }

  private translateTamilKeywords(text: string): string {
    const tamilToEnglish: { [key: string]: string } = {
      // Enhanced medical terms
      '‡Æï‡Ææ‡ÆØ‡Øç‡Æö‡Øç‡Æö‡Æ≤‡Øç': 'fever',
      '‡Æµ‡ÆØ‡Æø‡Æ±‡Øç‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ': 'diarrhea',
      '‡Æá‡Æ∞‡ØÅ‡ÆÆ‡Æ≤‡Øç': 'cough',
      '‡ÆÆ‡ØÇ‡Æö‡Øç‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æ£‡Æ±‡Æ≤‡Øç': 'breathing difficulty',
      '‡Æµ‡ØÄ‡Æï‡Øç‡Æï‡ÆÆ‡Øç': 'swelling',
      '‡Æµ‡Æ≤‡Æø': 'pain',
      '‡Æ®‡Æü‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Øç': 'shivering',
      '‡Æö‡Øã‡Æ∞‡Øç‡Æµ‡ØÅ': 'weakness',
      '‡Æµ‡Ææ‡Æ®‡Øç‡Æ§‡Æø': 'vomiting',
      '‡Æ™‡Æö‡Æø‡ÆØ‡Æø‡Æ©‡Øç‡ÆÆ‡Øà': 'loss of appetite',
      
      // Animals
      '‡ÆÆ‡Ææ‡Æü‡ØÅ': 'cattle',
      '‡ÆÆ‡Ææ‡Æü‡ØÅ‡Æï‡Æ≥‡Øç': 'cattle',
      '‡Æé‡Æ∞‡ØÅ‡ÆÆ‡Øà': 'buffalo',
      '‡Æé‡Æ∞‡ØÅ‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç': 'buffaloes',
      '‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà': 'livestock',
      '‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà‡Æï‡Æ≥‡Øç': 'livestock',
      '‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ': 'animal',
      '‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç': 'animals',
      
      // Medical terms
      '‡Æ®‡Øã‡ÆØ‡Øç': 'disease',
      '‡Æ®‡Øã‡ÆØ‡Øç‡Æï‡Æ≥‡Øç': 'diseases',
      '‡Æö‡Æø‡Æï‡Æø‡Æö‡Øç‡Æö‡Øà': 'treatment',
      '‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ': 'medicine',
      '‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Øç': 'medical treatment',
      '‡Æ§‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡ØÇ‡Æö‡Æø': 'vaccination',
      '‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø': 'symptom',
      '‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø‡Æï‡Æ≥‡Øç': 'symptoms',
      '‡Æ§‡Øä‡Æ±‡Øç‡Æ±‡ØÅ': 'infection',
      '‡Æµ‡Æø‡ÆØ‡Ææ‡Æ§‡Æø': 'illness',
      
      // Body parts
      '‡Æ™‡Ææ‡Æ≤‡Øç': 'milk',
      '‡ÆÆ‡Æü‡Æø': 'udder',
      '‡ÆÆ‡ØÅ‡Æ≤‡Øà‡Æï‡Øç‡Æï‡Ææ‡ÆÆ‡Øç‡Æ™‡ØÅ': 'teat',
      '‡Æµ‡ÆØ‡Æø‡Æ±‡ØÅ': 'stomach',
      '‡Æï‡Ææ‡Æ≤‡Øç': 'leg',
      '‡Æï‡Æ£‡Øç': 'eye',
      '‡Æï‡Ææ‡Æ§‡ØÅ': 'ear',
      '‡Æµ‡Ææ‡ÆØ‡Øç': 'mouth',
      
      // Question words
      '‡Æé‡Æ©‡Øç‡Æ©': 'what',
      '‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø': 'how',
      '‡Æè‡Æ©‡Øç': 'why',
      '‡Æé‡Æô‡Øç‡Æï‡Øá': 'where',
      '‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ': 'when',
      '‡ÆØ‡Ææ‡Æ∞‡Øç': 'who',
      
      // Common words
      '‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡ØÅ': 'reduction',
      '‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç': 'increase',
      '‡Æ§‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ': 'prevention',
      '‡Æï‡ØÅ‡Æ£‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ': 'cure',
      '‡Æö‡Æ∞‡Æø': 'correct',
      '‡Æ™‡Æø‡Æ∞‡Æö‡Øç‡Æö‡Æ©‡Øà': 'problem'
    };

    let translatedText = text;
    
    // Apply translations with word boundaries for better accuracy
    Object.entries(tamilToEnglish).forEach(([tamil, english]) => {
      const regex = new RegExp(`\\b${tamil}\\b`, 'g');
      translatedText = translatedText.replace(regex, english);
    });

    console.log('üîÑ Tamil to English translation:', text, '->', translatedText);
    return translatedText;
  }

  private translateEnglishKeywords(text: string): string {
    const englishToTamil: { [key: string]: string } = {
      // Medical terms
      'fever': '‡Æï‡Ææ‡ÆØ‡Øç‡Æö‡Øç‡Æö‡Æ≤‡Øç',
      'diarrhea': '‡Æµ‡ÆØ‡Æø‡Æ±‡Øç‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ',
      'cough': '‡Æá‡Æ∞‡ØÅ‡ÆÆ‡Æ≤‡Øç',
      'breathing difficulty': '‡ÆÆ‡ØÇ‡Æö‡Øç‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡Æø‡Æ£‡Æ±‡Æ≤‡Øç',
      'swelling': '‡Æµ‡ØÄ‡Æï‡Øç‡Æï‡ÆÆ‡Øç',
      'pain': '‡Æµ‡Æ≤‡Æø',
      'shivering': '‡Æ®‡Æü‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Øç',
      'weakness': '‡Æö‡Øã‡Æ∞‡Øç‡Æµ‡ØÅ',
      'vomiting': '‡Æµ‡Ææ‡Æ®‡Øç‡Æ§‡Æø',
      'loss of appetite': '‡Æ™‡Æö‡Æø‡ÆØ‡Æø‡Æ©‡Øç‡ÆÆ‡Øà',
      
      // Animals
      'cattle': '‡ÆÆ‡Ææ‡Æü‡ØÅ‡Æï‡Æ≥‡Øç',
      'buffalo': '‡Æé‡Æ∞‡ØÅ‡ÆÆ‡Øà',
      'buffaloes': '‡Æé‡Æ∞‡ØÅ‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç',
      'livestock': '‡Æï‡Ææ‡Æ≤‡Øç‡Æ®‡Æü‡Øà‡Æï‡Æ≥‡Øç',
      'animal': '‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ',
      'animals': '‡Æµ‡Æø‡Æ≤‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç',
      
      // Treatment terms
      'disease': '‡Æ®‡Øã‡ÆØ‡Øç',
      'diseases': '‡Æ®‡Øã‡ÆØ‡Øç‡Æï‡Æ≥‡Øç',
      'treatment': '‡Æö‡Æø‡Æï‡Æø‡Æö‡Øç‡Æö‡Øà',
      'medicine': '‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ',
      'medical treatment': '‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Øç',
      'vaccination': '‡Æ§‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡ØÇ‡Æö‡Æø',
      'symptom': '‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø',
      'symptoms': '‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø‡Æï‡Æ≥‡Øç',
      'infection': '‡Æ§‡Øä‡Æ±‡Øç‡Æ±‡ØÅ',
      'illness': '‡Æµ‡Æø‡ÆØ‡Ææ‡Æ§‡Æø',
      
      // Body parts
      'milk': '‡Æ™‡Ææ‡Æ≤‡Øç',
      'udder': '‡ÆÆ‡Æü‡Æø',
      'teat': '‡ÆÆ‡ØÅ‡Æ≤‡Øà‡Æï‡Øç‡Æï‡Ææ‡ÆÆ‡Øç‡Æ™‡ØÅ',
      'stomach': '‡Æµ‡ÆØ‡Æø‡Æ±‡ØÅ',
      'leg': '‡Æï‡Ææ‡Æ≤‡Øç',
      'eye': '‡Æï‡Æ£‡Øç',
      'ear': '‡Æï‡Ææ‡Æ§‡ØÅ',
      'mouth': '‡Æµ‡Ææ‡ÆØ‡Øç',
      
      // Common terms
      'reduction': '‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡ØÅ',
      'increase': '‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç',
      'prevention': '‡Æ§‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ',
      'cure': '‡Æï‡ØÅ‡Æ£‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æ§‡Æ≤‡Øç',
      'problem': '‡Æ™‡Æø‡Æ∞‡Æö‡Øç‡Æö‡Æ©‡Øà'
    };

    let translatedText = text;
    
    // Apply translations with word boundaries
    Object.entries(englishToTamil).forEach(([english, tamil]) => {
      const regex = new RegExp(`\\b${english}\\b`, 'gi');
      translatedText = translatedText.replace(regex, tamil);
    });

    console.log('üîÑ English to Tamil translation:', text, '->', translatedText);
    return translatedText;
  }

  public async extractMedicalEntities(text: string): Promise<string[]> {
    // Enhanced entity extraction for veterinary terms
    const medicalTerms = [
      'fever', 'diarrhea', 'cough', 'swelling', 'infection', 'inflammation',
      'cattle', 'buffalo', 'livestock', 'animal', 'veterinary', 'treatment',
      'medicine', 'dosage', 'symptoms', 'diagnosis', 'therapy', 'vaccination',
      'milk', 'udder', 'mastitis', 'lameness', 'respiratory', 'digestive',
      'bloating', 'constipation', 'dehydration', 'anemia', 'parasites'
    ];

    const foundEntities = medicalTerms.filter(term => 
      text.toLowerCase().includes(term.toLowerCase())
    );

    return [...new Set(foundEntities)];
  }

  public getModelStatus(): { isReady: boolean; isLoading: boolean; progress: number } {
    return {
      isReady: this.isInitialized,
      isLoading: this.isLoading,
      progress: this.loadingProgress
    };
  }

  public async warmUp(): Promise<void> {
    // Warm up the model with a simple question
    if (await this.isReady()) {
      try {
        await this.answerQuestion(
          'What is veterinary medicine?',
          'Veterinary medicine is the branch of medicine that deals with the prevention, diagnosis and treatment of disease, disorder and injury in animals.',
          'en'
        );
        console.log('üî• AI model warmed up successfully');
      } catch (error) {
        console.warn('‚ö†Ô∏è Model warm-up failed:', error);
      }
    }
  }
}

// Export singleton instance
export const bioBertModel = new BioBertModel();